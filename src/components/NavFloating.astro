---
interface Route {
  text: string;
  link: string;
}
export interface Props {
  groups: Route[][];
}
const { groups } = Astro.props.frontmatter || Astro.props;
const pills0 = groups[0];
const pills1 = groups[1];
const pills2 = groups[2];
// ESTO te da el path, quiero separar host / page / path
const url = new URL(Astro.url);
const currentPage = url.pathname.split("/")[1];
---

<div class="floating-nav close" data-menu-floating>
  <div class="header-background"></div>
  <div class="wrapper">
    {
      pills0.map((route: Route) => {
        return (
          <a
            class={`item ${
              currentPage && route.link.includes(currentPage) ? "selected" : ""
            }`}
            href={route.link}
          >
            {route.text}
          </a>
        );
      })
    }
  </div>
  <div class="wrapper">
    {
      pills1.map((route: Route) => {
        return (
          <a
            class={`item important ${
              currentPage && route.link.includes(currentPage) ? "selected" : ""
            }`}
            href={route.link}
          >
            {route.text}
          </a>
        );
      })
    }
  </div>
  <div class="wrapper">
    {
      pills2.map((route: Route) => {
        return (
          <a
            class={`item ${
              currentPage && route.link.includes(currentPage) ? "selected" : ""
            }`}
            href={route.link}
          >
            {route.text}
          </a>
        );
      })
    }
  </div>
</div>

<style lang="scss">
  .floating-nav {
    overflow: hidden;
    position: fixed;
    z-index: 9;
    opacity: 0.98;
    background-color: var(--color-theme-blue);
    padding: 4rem 3rem;
    display: grid;
    width: 100vw;
    height: 100vh;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(3, max-content);
    gap: 2rem;
    transition: opacity 300ms ease;
    pointer-events: all;
    &.close {
      border: 2px solid red;
      pointer-events: none;
      opacity: 0;
    }
    .header-background {
      position: absolute;
      z-index: -1;
      overflow: hidden;
      width: 100vw;
      height: 100vh;
      //background: linear-gradient(to top, #2E4676 5%, rgba(182, 207, 230, 0.19) 40%)
      &:after {
        content: "";
        background-image: url(/graphics/bg-pattern-black@2x.png);
        background-size: 6.1875rem 6.1875rem;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    }
    .wrapper {
      width: 100%;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
      gap: 0.8rem;
    }
    .item {
      cursor: pointer;
      padding: 0.4rem 1.8rem;
      border: 1px solid transparent;
      border-radius: 2rem;
      font-size: 1.6rem;
      font-weight: 600;
      text-decoration: none;
      color: var(--color-white);
      transition: background-color 600ms ease, color 200ms ease;
      &.important {
        border-color: var(--color-white-80);
      }
      &:hover:not(.selected) {
        color: var(--color-theme-blue);
        background-color: var(--color-white-80);
      }
      &.selected {
        color: var(--color-theme-blue);
        background-color: var(--color-grey-60);
      }
    }
  }
</style>
